The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Import function from module:

    >>> add_integer = __import__('0-add_integer').add_integer

Test one int argument:

    >>> add_integer(2)
    100

Test one int argument and check default second:

    >>> add_integer(0)
    98

Test one float:

    >>> add_integer(123.9)
    221

Test one negative float:

    >>> add_integer(-95.5)
    3

Test one negative float

    >>> add_integer(-5, 15.5)
    10

Test two integers:

    >>> add_integer(10, 5)
    15

Test two big integers:

    >>> add_integer(999999998, 999999999)
    1999999997

Test positive, negative integers:

    >>> add_integer(34263478, -89234582395)
    -89200318917

Test string, integer:

    >>> add_integer("foo", 0)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test integer, string:

    >>> add_integer(5, "foo")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Test negative, positive integers:

    >>> add_integer(-13947692, 57234)
    -13890458

Test two float:

   >>> add_integer(10.5, 5.5)
   15

Test one float:

   >>> add_integer(10.5, 5)
   15

Test one float int:

   >>> add_integer(10, 5.5)
   15

Test negative and float:

   >>> add_integer(10.5, -5)
   5

Test both args invalid:

    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test two strings:

    >>> add_integer("foo", "boo")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Add infinity:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Add nan:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Test second arg invalid:

    >>> add_integer(123123, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Test float overflow:
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Test float overflow:

    >>> add_integer(0, float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Test with zeros:

    >>> add_integer(0, 0)
    0
